name: Build, Run and Release Python App

on:
  push:
    tags:
      - 'v*'

jobs:
  set_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-windows:
    runs-on: windows-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Inject version into main.py
        shell: pwsh
        run: |
          (Get-Content main.py) -replace '__version__ = .*', '__version__ = "${{ env.APP_VERSION }}"' | Set-Content main.py

      - name: Build Windows executable
        run: |
          pyinstaller --clean --onefile --windowed --add-data "src/png;src/png" --name "CAN_Library_Generator" main.py

      - name: Run the application
        run: |
          Start-Process -FilePath "dist/CAN_Library_Generator.exe"
          Start-Sleep -Seconds 10
          Stop-Process -Name "CAN_Library_Generator" -ErrorAction SilentlyContinue

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist/CAN_Library_Generator.exe

  build-macos:
    runs-on: macos-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Inject version into main.py
        run: |
          sed -i '' "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" main.py

      - name: Build macOS app
        run: |
          python setup.py py2app

      - name: Install gtimeout
        run: |
          brew install coreutils

      - name: Run the application
        run: |
          gtimeout 10s ./dist/CAN_Library_Generator.app/Contents/MacOS/CAN_Library_Generator > run.log 2>&1 || true
          if grep -q "Traceback (most recent call last):" run.log; then
            echo "❌ App crashed:"
            cat run.log
            exit 1
          else
            echo "✅ App ran successfully"
          fi

      - name: Create DMG
        run: |
          hdiutil create -volname "CAN_Library_Generator" \
                         -srcfolder "dist/CAN_Library_Generator.app" \
                         -ov -format UDZO dist/CAN_Library_Generator.dmg

      - name: Mount DMG
        id: mount_dmg
        run: |
          MOUNT_DIR=$(hdiutil attach dist/CAN_Library_Generator.dmg | grep Volumes | awk '{print $3}')
          echo "mount_point=$MOUNT_DIR" >> "$GITHUB_OUTPUT"

      - name: Run app from mounted DMG (10s timeout)
        run: |
          brew install coreutils
          gtimeout 10s "$MOUNT_POINT/CAN_Library_Generator.app/Contents/MacOS/CAN_Library_Generator" || true
        env:
          MOUNT_POINT: ${{ steps.mount_dmg.outputs.mount_point }}

      - name: Unmount DMG
        if: always()
        run: |
          hdiutil detach "${{ steps.mount_dmg.outputs.mount_point }}" || true

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*

  build-linux:
    runs-on: ubuntu-latest
    needs: set_version
    env:
      APP_VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgdk-pixbuf2.0-0 libglib2.0-0
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Inject version into main.py
        run: |
          sed -i "s/^__version__ = .*/__version__ = \"${APP_VERSION}\"/" main.py

      - name: Build Linux executable
        run: |
          pyinstaller --clean --onefile --windowed --add-data "src/png:src/png" --name "CAN_Library_Generator" --hidden-import "PIL._tkinter_finder" main.py

      - name: Run the application
        run: |
          xvfb-run ./dist/CAN_Library_Generator &
          sleep 10
          kill $!

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: dist/CAN_Library_Generator